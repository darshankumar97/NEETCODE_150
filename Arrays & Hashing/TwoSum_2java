public class TwoSum_2 {
    /*
     * 1. Brute Force (O(n²))

Try all pairs (i, j) and check if they sum to target.

Works but slow.

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        for (int i = 0; i < numbers.length; i++) {
            for (int j = i + 1; j < numbers.length; j++) {
                if (numbers[i] + numbers[j] == target) {
                    return new int[]{i + 1, j + 1};
                }
            }
        }
        return new int[]{};
    }
}
2. Binary Search (O(n log n))

For each element numbers[i], search for target - numbers[i] using binary search in the right side.

Uses the fact that the array is sorted.

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        for (int i = 0; i < numbers.length; i++) {
            int left = i + 1, right = numbers.length - 1;
            int toFind = target - numbers[i];

            while (left <= right) {
                int mid = left + (right - left) / 2;
                if (numbers[mid] == toFind) {
                    return new int[]{i + 1, mid + 1};
                } else if (numbers[mid] < toFind) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        return new int[]{};
    }
}

3. Two Pointers (Optimal, O(n))
Use one pointer at start (left), one at end (right).

Compute sum:

If sum == target → answer found.

If sum < target → move left++ (need bigger sum).

If sum > target → move right-- (need smaller sum).

     * 
     */

    
        public int[] twoSum(int[] numbers, int target) {
            int left = 0, right = numbers.length - 1;
    
            while (left < right) {
                int sum = numbers[left] + numbers[right];
                if (sum == target) {
                    return new int[]{left + 1, right + 1}; // 1-based index
                } else if (sum < target) {
                    left++;
                } else {
                    right--;
                }
            }
            return new int[]{};
        }
    
    


}
